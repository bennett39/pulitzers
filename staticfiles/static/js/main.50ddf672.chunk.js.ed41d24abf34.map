{"version":3,"sources":["Checkbox.js","Book.js","App.js","serviceWorker.js","index.js"],"names":["Icon","styled","svg","_templateObject","HiddenCheckbox","input","attrs","type","_templateObject2","StyledCheckbox","div","_templateObject3","props","checked","CheckboxContainer","_templateObject4","Checkbox","_ref","className","Object","objectWithoutProperties","react_default","a","createElement","assign","viewBox","points","BookCard","title","author","year_won","src_Checkbox","completed","onChange","onClick","BookList","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","error","isLoaded","api_url","books","_this2","fetch","then","res","json","result","setState","bookId","url","toString","slice","payload","i","length","console","log","method","headers","Content-Type","body","JSON","stringify","response","catch","_this3","_this$state","message","map","book","key","id","toggle","React","Component","App","href","src_Book","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.50ddf672.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst Icon = styled.svg`\n  fill: none;\n  stroke: white;\n  stroke-width: 2px;\n`\n\nconst HiddenCheckbox = styled.input.attrs({ type: 'checkbox' })`\n  // Hide checkbox visually but remain accessible to screen readers.\n  // Source: https://polished.js.org/docs/#hidevisually\n  border: 0;\n  clip: rect(0 0 0 0);\n  clippath: inset(50%);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  white-space: nowrap;\n  width: 1px;\n`\n\nconst StyledCheckbox = styled.div`\n  display: inline-block;\n  margin-bottom: 1em;\n  width: 1.5em;\n  height: 1.5em;\n  background: ${props => props.checked ? 'mediumspringgreen' : 'lightsteelblue'}\n  border-radius: 3px;\n  transition: all 150ms;\n  ${Icon} {\n    visibility: ${props => props.checked ? 'visible' : 'hidden'}\n  }\n`\n\nconst CheckboxContainer = styled.div`\n  display: inline-block;\n  vertical-align: middle;\n`\n\nconst Checkbox = ({ className, checked, ...props }) => (\n  <CheckboxContainer className={className}>\n    <HiddenCheckbox checked={checked} {...props} />\n    <StyledCheckbox checked={checked}>\n      <Icon viewBox=\"0 0 24 24\">\n        <polyline points=\"20 6 9 17 4 12\" />\n      </Icon>\n    </StyledCheckbox>\n  </CheckboxContainer>\n)\n\nexport default Checkbox;\n","import React from 'react';\nimport './Book.css';\nimport Checkbox from './Checkbox.js';\n\nfunction BookCard(props) {\n  return (\n    <div className=\"card\">\n      <h2>{props.title}</h2>\n      <p>{props.author}</p>\n      <p><em>{props.year_won}</em></p>\n      <label>\n        <Checkbox checked={props.completed} onChange={props.onClick} />\n      </label>\n    </div>\n  );\n}\n\nclass BookList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      api_url: \"/api/books/\",\n      books: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(this.state.api_url)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            books: result\n          });\n        }\n      )\n  }\n\n  toggle(bookId) {\n    let url = this.state.api_url + bookId.toString() + '/';\n    let books = this.state.books.slice();\n    let payload = {'completed': null};\n    for (let i = 0; i < books.length; i++) {\n      if (books[i]['id'] === bookId) {\n        books[i]['completed'] = !books[i]['completed']\n        payload['completed'] = books[i]['completed']\n      }\n    }\n    console.log('Sending {\"completed\": ' + payload['completed'] + '\"} to ' + url);\n    fetch(url, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload),\n    }).then(res => res.json())\n    .then(response => console.log('Success: ', JSON.stringify(response)))\n    .catch(error => console.error('Error: ', error));\n    this.setState({\n      books: books,\n    });\n  }\n\n  render() {\n    const { error, isLoaded, books } = this.state;\n    if (error) {\n      return <div>Error: {error.message}</div>\n    } else if (!isLoaded) {\n      return <div>Loading...</div>\n    } else {\n      return (\n        <div className=\"centered\">\n          <section className=\"cards\">\n            {books.map(book => (\n              <BookCard\n                key={book.id}\n                year_won={book.year_won}\n                title={book.title}\n                author={book.author}\n                completed={book.completed}\n                onClick={() => this.toggle(book.id)}\n              />\n            ))}\n          </section>\n        </div>\n      );\n    }\n  }\n}\n\nexport default BookList\n","import React from 'react';\nimport BookList from './Book';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Pulitzer Reading List</h1>\n      <p>A list of all the Pulitzer Prize winning novels, along with a checkbox to track if you've read them.</p>\n      <p>Behind the scenes, all data stored in PostgreSQL database. Uses Django REST Framework to serialize data and process requests from React frontend.</p>\n      <p>API available at <a href=\"/api/\">/api/</a>.</p>\n      <p>Open the console to see requests when you click the checkboxes.</p>\n      <BookList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}